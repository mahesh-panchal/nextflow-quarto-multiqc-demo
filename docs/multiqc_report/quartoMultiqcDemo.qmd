---
title: "Quarto MultiQC demo"

format:
  html:
    embed-resources: true
---

## Quarto

This is an example of how to use MultiQC interactively in a report. MultiQC is a great tool for summarising log files of various tools.
One drawback though is you already need to be familiar with how to interpret the output of those tools in their context. For example,
FastQC is a bioinformatic tool that analyses sequence data, and produces PASS/FAIL metrics for various analyses. An underlying 
assumption is that the sequence data is whole genome sequence data, and therefore has certain properties. FastQC, however, can be used
on other types of sequence data, with the caveat that not all analyses need to pass or fail. This is confusing for those learning the
field who have never encountered this. 

This is where a Quarto notebook comes in. By using Multiqc as a Python package, one can narrate to the reader how to interpret plots, and which
analyses to focus on to answer particular questions. We can also use conditional inclusion to display only relevant sections. In this
way, we make it easier for newcomers to interpret analysis logs, particularly those using production-level workflows like [nf-core](https://nf-co.re/).
Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Setup

```{python}
#| echo: false
#| tags: [parameters]

log_path = 'log_files'
run_fastqc = True
run_genomescope = True
run_busco = True
```

<details>
<summary>MultiQC Log parse</summary>

```{python}
#| output: true
import multiqc
from pprint import pprint
from IPython.core.display import display

multiqc.reset() # Important for Quarto preview
# Then load a custom config using multiqc.load_config("multiqc_config_illumina.yml")
multiqc.load_config("multiqc_config.yml")
# The path appears to be relative to the current notebook location.
multiqc.parse_logs(log_path)
```
</details>

What's running:

```{python}
#| echo: false
print(f"FastQC: {run_fastqc} {type(run_fastqc)}")
print(f"GenomeScope: {run_genomescope} {type(run_genomescope)}")
```

::: {.content-visible when-meta="run_fastqc"  }

## FastQC 

```{python}
# pprint pretty prints the dictionary
pprint(multiqc.list_plots())
pprint(multiqc.list_modules())
```

```{python}
multiqc.write_report(
    force=True,
    output_dir="multiqc",
    title="Nextflow Quarto MultiQC Demo Report",
    filename="quarto-multiqc-report.html",
)
```


```{python}
#| output: asis
# from bs4 import BeautifulSoup
# with open('multiqc/quarto-multiqc-report.html', 'r', encoding='utf-8') as file:
#     html_content = file.read()

# soup = BeautifulSoup(html_content, 'html.parser')

# # Find all style content
# script_sections = soup.find_all('script')

# # Print all style content
# for script in script_sections:
#     print(script.prettify())

# # Find all style content
# style_sections = soup.find_all('style')

# # Print all style content
# for style in style_sections:
#     print(style.prettify())
```
```{python}
#| output: asis
# print(soup.find(id="mqc_violintable_wrapper_input_samplesheet").prettify())
# print(soup.find(id="mqc-module-section-samplesheet").prettify())
if run_fastqc:
    display(multiqc.get_plot("samplesheet", "samplesheet-section").show().rename(columns={'': 'ToL ID'}))
```

### Sequence counts

```{python}
#| echo: false
if run_fastqc:
    display(multiqc.get_plot("fastqc", "Sequence Counts").show())
```

### Per sequence GC content
```{python}
#| echo: false

if run_fastqc:
    display(multiqc.get_plot("fastqc", "Per Sequence GC Content").show())
```
:::

::: {.content-visible when-meta="run_genomescope" }

## Genomescope

Render Genomescope
```{python}
#| echo: false
#| output: asis
import glob
import os
from markdown_it import MarkdownIt

if run_genomescope:
    images = [
        img
        for pattern in ["log_plot", "linear_plot"]
        for img in glob.glob(f"{log_path}/*_{pattern}.png")
    ]

    # Ensure we have multiples of 4 images
    if len(images) == 0:
        raise ValueError("No files found")

    # Ensure we have multiples of 4 images
    if len(images) % 4 != 0:
        raise ValueError("Exact multiples of 4 images are required.")


    # Function to sort filenames
    def sort_key(filename):
        filename = os.path.basename(filename)
        parts = filename.split("_")
        # Order: linear < log, non-transformed < transformed
        order = {"linear": 0, "log": 1}
        transformed = 1 if "transformed" in parts else 0
        return (parts[0], transformed, order[parts[-2]])


    # Grouping and sorting filenames
    from itertools import groupby

    # Sort filenames first
    sorted_filenames = sorted(images, key=sort_key)

    # Group by sample
    grouped_filenames = {}
    for key, group in groupby(
        sorted_filenames, key=lambda x: os.path.basename(x).split("_")[0]
    ):
        grouped_filenames[key] = list(group)


    # Function to format filenames
    def format_filename(filename):
        return os.path.basename(filename).replace(".png", "").replace("_", " ")


    # Print grouped and sorted filenames
    tabs = []  # tabbed panels
    for sample, files in grouped_filenames.items():
        tabs.append(f"### {sample}")
        tabs.append("::: {.panel-tabset}")
        for image in files:
            formatted_filename = format_filename(image)
            tabs.append(f"## {formatted_filename}")
            tabs.append(f"![{formatted_filename}]({image})")
        tabs.append(":::")

    markdown = "\n\n".join(tabs)
    print(markdown)

    # TODO Render ::: as div and style
    module = multiqc.BaseMultiqcModule(
        name="GenomeScope2",
        anchor="genomescope_2",
    )
    module.add_section(
        content=MarkdownIt().render(markdown),
        name="My metrics",
        anchor="genome_scope_2",
        description="Genome Scope2 Panel",
    )
    multiqc.report.modules.append(module)
```

:::

::: {.content-visible when-meta="run_busco" }

## Busco

```{python}
#| echo: false
if run_busco:
    for lineage in multiqc.list_plots()["busco"]:
        display(multiqc.get_plot("busco", f"{lineage}").show())
```

:::

## Versions

